const { readFileSync } = require('fs')
const LoomTruffleProvider = require('loom-truffle-provider')

// change private key here
const privateKey = readFileSync('test_priv.key', 'utf-8')

function createProvider(provider, privateKey) {

  let providerConfig = {
    chainId: undefined,
    writeUrl: undefined,
    readUrl: undefined
  }

  if (provider === 'local') {
    providerConfig.chainId = 'default'
    providerConfig.writeUrl = 'http://127.0.0.1:46658/rpc'
    providerConfig.readUrl = 'http://127.0.0.1:46658/query'
  } else if (provider === 'e2e') {
    let yaml = require('js-yaml');
    let loomYamlPath = process.env.CFG
    try {
      cfg = yaml.safeLoad(readFileSync(loomYamlPath, 'utf8'));
    } catch (e) {
      console.log(e);
    }

    if (cfg.TransferGateway !== undefined) {
      providerConfig.chainId = 'default'
      providerConfig.writeUrl = cfg.TransferGateway.DAppChainWriteURI
      providerConfig.readUrl = cfg.TransferGateway.DAppChainReadURI
    } else {
      providerConfig.chainId = 'default'
      providerConfig.writeUrl = cfg.BinanceTransferGateway.DAppChainWriteURI
      providerConfig.readUrl = cfg.BinanceTransferGateway.DAppChainReadURI
    }
  }
  
  // ./private_key file contains a base64 encoded key generated by the command:
  // loom genkey -a publicKey -k privateKey
  // const privateKey = readFileSync('./private_key', 'utf-8')
  const mnemonic = readFileSync('mnemonic', 'utf-8')
  const loomTruffleProvider = new LoomTruffleProvider(providerConfig.chainId, providerConfig.writeUrl, providerConfig.readUrl, privateKey)
  loomTruffleProvider.createExtraAccountsFromMnemonic(mnemonic, 10)
  return loomTruffleProvider
}

const testProvider = createProvider('local', privateKey)
const e2eProvider = createProvider('e2e', privateKey)

module.exports = {
  // See <http://truffleframework.com/docs/advanced/configuration>
  // for more about customizing your Truffle configuration!
  networks: {
    local: {
      provider: testProvider,
      network_id: '*',
    },
    ganache:{
      host: '127.0.0.1',
      port: 7545,
      network_id: '*', // Match any network id
    },
    e2e:{
      provider: e2eProvider,
      network_id: '*',
    }
  }
};

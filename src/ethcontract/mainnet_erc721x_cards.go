// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethcontract

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// MainnetERC721XCardsContractABI is the input ABI used to generate the binding from.
const MainnetERC721XCardsContractABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gateway\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOwned\",\"outputs\":[{\"name\":\"indexes\",\"type\":\"uint256[]\"},{\"name\":\"balances\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721X\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"isOperator\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_gateway\",\"type\":\"address\"},{\"name\":\"_baseTokenURI\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenTypes\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"BatchTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"TransferWithQuantity\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"name\":\"receivers\",\"type\":\"address[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_supply\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"depositToGatewayNFT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToGateway\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"balanceOfToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// MainnetERC721XCardsContractBin is the compiled bytecode used for deploying new contracts.
const MainnetERC721XCardsContractBin = ``

// DeployMainnetERC721XCardsContract deploys a new Ethereum contract, binding an instance of MainnetERC721XCardsContract to it.
func DeployMainnetERC721XCardsContract(auth *bind.TransactOpts, backend bind.ContractBackend, _gateway common.Address, _baseTokenURI string) (common.Address, *types.Transaction, *MainnetERC721XCardsContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MainnetERC721XCardsContractABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(MainnetERC721XCardsContractBin), backend, _gateway, _baseTokenURI)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MainnetERC721XCardsContract{MainnetERC721XCardsContractCaller: MainnetERC721XCardsContractCaller{contract: contract}, MainnetERC721XCardsContractTransactor: MainnetERC721XCardsContractTransactor{contract: contract}, MainnetERC721XCardsContractFilterer: MainnetERC721XCardsContractFilterer{contract: contract}}, nil
}

// MainnetERC721XCardsContract is an auto generated Go binding around an Ethereum contract.
type MainnetERC721XCardsContract struct {
	MainnetERC721XCardsContractCaller     // Read-only binding to the contract
	MainnetERC721XCardsContractTransactor // Write-only binding to the contract
	MainnetERC721XCardsContractFilterer   // Log filterer for contract events
}

// MainnetERC721XCardsContractCaller is an auto generated read-only Go binding around an Ethereum contract.
type MainnetERC721XCardsContractCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MainnetERC721XCardsContractTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MainnetERC721XCardsContractTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MainnetERC721XCardsContractFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MainnetERC721XCardsContractFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MainnetERC721XCardsContractSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MainnetERC721XCardsContractSession struct {
	Contract     *MainnetERC721XCardsContract // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                // Call options to use throughout this session
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// MainnetERC721XCardsContractCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MainnetERC721XCardsContractCallerSession struct {
	Contract *MainnetERC721XCardsContractCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                      // Call options to use throughout this session
}

// MainnetERC721XCardsContractTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MainnetERC721XCardsContractTransactorSession struct {
	Contract     *MainnetERC721XCardsContractTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                      // Transaction auth options to use throughout this session
}

// MainnetERC721XCardsContractRaw is an auto generated low-level Go binding around an Ethereum contract.
type MainnetERC721XCardsContractRaw struct {
	Contract *MainnetERC721XCardsContract // Generic contract binding to access the raw methods on
}

// MainnetERC721XCardsContractCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MainnetERC721XCardsContractCallerRaw struct {
	Contract *MainnetERC721XCardsContractCaller // Generic read-only contract binding to access the raw methods on
}

// MainnetERC721XCardsContractTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MainnetERC721XCardsContractTransactorRaw struct {
	Contract *MainnetERC721XCardsContractTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMainnetERC721XCardsContract creates a new instance of MainnetERC721XCardsContract, bound to a specific deployed contract.
func NewMainnetERC721XCardsContract(address common.Address, backend bind.ContractBackend) (*MainnetERC721XCardsContract, error) {
	contract, err := bindMainnetERC721XCardsContract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MainnetERC721XCardsContract{MainnetERC721XCardsContractCaller: MainnetERC721XCardsContractCaller{contract: contract}, MainnetERC721XCardsContractTransactor: MainnetERC721XCardsContractTransactor{contract: contract}, MainnetERC721XCardsContractFilterer: MainnetERC721XCardsContractFilterer{contract: contract}}, nil
}

// NewMainnetERC721XCardsContractCaller creates a new read-only instance of MainnetERC721XCardsContract, bound to a specific deployed contract.
func NewMainnetERC721XCardsContractCaller(address common.Address, caller bind.ContractCaller) (*MainnetERC721XCardsContractCaller, error) {
	contract, err := bindMainnetERC721XCardsContract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MainnetERC721XCardsContractCaller{contract: contract}, nil
}

// NewMainnetERC721XCardsContractTransactor creates a new write-only instance of MainnetERC721XCardsContract, bound to a specific deployed contract.
func NewMainnetERC721XCardsContractTransactor(address common.Address, transactor bind.ContractTransactor) (*MainnetERC721XCardsContractTransactor, error) {
	contract, err := bindMainnetERC721XCardsContract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MainnetERC721XCardsContractTransactor{contract: contract}, nil
}

// NewMainnetERC721XCardsContractFilterer creates a new log filterer instance of MainnetERC721XCardsContract, bound to a specific deployed contract.
func NewMainnetERC721XCardsContractFilterer(address common.Address, filterer bind.ContractFilterer) (*MainnetERC721XCardsContractFilterer, error) {
	contract, err := bindMainnetERC721XCardsContract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MainnetERC721XCardsContractFilterer{contract: contract}, nil
}

// bindMainnetERC721XCardsContract binds a generic wrapper to an already deployed contract.
func bindMainnetERC721XCardsContract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MainnetERC721XCardsContractABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _MainnetERC721XCardsContract.Contract.MainnetERC721XCardsContractCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.MainnetERC721XCardsContractTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.MainnetERC721XCardsContractTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _MainnetERC721XCardsContract.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(_owner address) constant returns(balance uint256)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCaller) BalanceOf(opts *bind.CallOpts, _owner common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MainnetERC721XCardsContract.contract.Call(opts, out, "balanceOf", _owner)
	return *ret0, err
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(_owner address) constant returns(balance uint256)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) BalanceOf(_owner common.Address) (*big.Int, error) {
	return _MainnetERC721XCardsContract.Contract.BalanceOf(&_MainnetERC721XCardsContract.CallOpts, _owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(_owner address) constant returns(balance uint256)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCallerSession) BalanceOf(_owner common.Address) (*big.Int, error) {
	return _MainnetERC721XCardsContract.Contract.BalanceOf(&_MainnetERC721XCardsContract.CallOpts, _owner)
}

// BalanceOfToken is a free data retrieval call binding the contract method 0xe380b7bd.
//
// Solidity: function balanceOfToken(_owner address, _tokenId uint256) constant returns(uint256)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCaller) BalanceOfToken(opts *bind.CallOpts, _owner common.Address, _tokenId *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MainnetERC721XCardsContract.contract.Call(opts, out, "balanceOfToken", _owner, _tokenId)
	return *ret0, err
}

// BalanceOfToken is a free data retrieval call binding the contract method 0xe380b7bd.
//
// Solidity: function balanceOfToken(_owner address, _tokenId uint256) constant returns(uint256)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) BalanceOfToken(_owner common.Address, _tokenId *big.Int) (*big.Int, error) {
	return _MainnetERC721XCardsContract.Contract.BalanceOfToken(&_MainnetERC721XCardsContract.CallOpts, _owner, _tokenId)
}

// BalanceOfToken is a free data retrieval call binding the contract method 0xe380b7bd.
//
// Solidity: function balanceOfToken(_owner address, _tokenId uint256) constant returns(uint256)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCallerSession) BalanceOfToken(_owner common.Address, _tokenId *big.Int) (*big.Int, error) {
	return _MainnetERC721XCardsContract.Contract.BalanceOfToken(&_MainnetERC721XCardsContract.CallOpts, _owner, _tokenId)
}

// Exists is a free data retrieval call binding the contract method 0x4f558e79.
//
// Solidity: function exists(_tokenId uint256) constant returns(bool)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCaller) Exists(opts *bind.CallOpts, _tokenId *big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _MainnetERC721XCardsContract.contract.Call(opts, out, "exists", _tokenId)
	return *ret0, err
}

// Exists is a free data retrieval call binding the contract method 0x4f558e79.
//
// Solidity: function exists(_tokenId uint256) constant returns(bool)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) Exists(_tokenId *big.Int) (bool, error) {
	return _MainnetERC721XCardsContract.Contract.Exists(&_MainnetERC721XCardsContract.CallOpts, _tokenId)
}

// Exists is a free data retrieval call binding the contract method 0x4f558e79.
//
// Solidity: function exists(_tokenId uint256) constant returns(bool)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCallerSession) Exists(_tokenId *big.Int) (bool, error) {
	return _MainnetERC721XCardsContract.Contract.Exists(&_MainnetERC721XCardsContract.CallOpts, _tokenId)
}

// Gateway is a free data retrieval call binding the contract method 0x116191b6.
//
// Solidity: function gateway() constant returns(address)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCaller) Gateway(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MainnetERC721XCardsContract.contract.Call(opts, out, "gateway")
	return *ret0, err
}

// Gateway is a free data retrieval call binding the contract method 0x116191b6.
//
// Solidity: function gateway() constant returns(address)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) Gateway() (common.Address, error) {
	return _MainnetERC721XCardsContract.Contract.Gateway(&_MainnetERC721XCardsContract.CallOpts)
}

// Gateway is a free data retrieval call binding the contract method 0x116191b6.
//
// Solidity: function gateway() constant returns(address)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCallerSession) Gateway() (common.Address, error) {
	return _MainnetERC721XCardsContract.Contract.Gateway(&_MainnetERC721XCardsContract.CallOpts)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(_tokenId uint256) constant returns(address)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCaller) GetApproved(opts *bind.CallOpts, _tokenId *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MainnetERC721XCardsContract.contract.Call(opts, out, "getApproved", _tokenId)
	return *ret0, err
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(_tokenId uint256) constant returns(address)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) GetApproved(_tokenId *big.Int) (common.Address, error) {
	return _MainnetERC721XCardsContract.Contract.GetApproved(&_MainnetERC721XCardsContract.CallOpts, _tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(_tokenId uint256) constant returns(address)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCallerSession) GetApproved(_tokenId *big.Int) (common.Address, error) {
	return _MainnetERC721XCardsContract.Contract.GetApproved(&_MainnetERC721XCardsContract.CallOpts, _tokenId)
}

// ImplementsERC721 is a free data retrieval call binding the contract method 0x1051db34.
//
// Solidity: function implementsERC721() constant returns(bool)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCaller) ImplementsERC721(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _MainnetERC721XCardsContract.contract.Call(opts, out, "implementsERC721")
	return *ret0, err
}

// ImplementsERC721 is a free data retrieval call binding the contract method 0x1051db34.
//
// Solidity: function implementsERC721() constant returns(bool)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) ImplementsERC721() (bool, error) {
	return _MainnetERC721XCardsContract.Contract.ImplementsERC721(&_MainnetERC721XCardsContract.CallOpts)
}

// ImplementsERC721 is a free data retrieval call binding the contract method 0x1051db34.
//
// Solidity: function implementsERC721() constant returns(bool)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCallerSession) ImplementsERC721() (bool, error) {
	return _MainnetERC721XCardsContract.Contract.ImplementsERC721(&_MainnetERC721XCardsContract.CallOpts)
}

// ImplementsERC721X is a free data retrieval call binding the contract method 0x7fb42a36.
//
// Solidity: function implementsERC721X() constant returns(bool)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCaller) ImplementsERC721X(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _MainnetERC721XCardsContract.contract.Call(opts, out, "implementsERC721X")
	return *ret0, err
}

// ImplementsERC721X is a free data retrieval call binding the contract method 0x7fb42a36.
//
// Solidity: function implementsERC721X() constant returns(bool)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) ImplementsERC721X() (bool, error) {
	return _MainnetERC721XCardsContract.Contract.ImplementsERC721X(&_MainnetERC721XCardsContract.CallOpts)
}

// ImplementsERC721X is a free data retrieval call binding the contract method 0x7fb42a36.
//
// Solidity: function implementsERC721X() constant returns(bool)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCallerSession) ImplementsERC721X() (bool, error) {
	return _MainnetERC721XCardsContract.Contract.ImplementsERC721X(&_MainnetERC721XCardsContract.CallOpts)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(_owner address, _operator address) constant returns(isOperator bool)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCaller) IsApprovedForAll(opts *bind.CallOpts, _owner common.Address, _operator common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _MainnetERC721XCardsContract.contract.Call(opts, out, "isApprovedForAll", _owner, _operator)
	return *ret0, err
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(_owner address, _operator address) constant returns(isOperator bool)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) IsApprovedForAll(_owner common.Address, _operator common.Address) (bool, error) {
	return _MainnetERC721XCardsContract.Contract.IsApprovedForAll(&_MainnetERC721XCardsContract.CallOpts, _owner, _operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(_owner address, _operator address) constant returns(isOperator bool)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCallerSession) IsApprovedForAll(_owner common.Address, _operator common.Address) (bool, error) {
	return _MainnetERC721XCardsContract.Contract.IsApprovedForAll(&_MainnetERC721XCardsContract.CallOpts, _owner, _operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCaller) Name(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _MainnetERC721XCardsContract.contract.Call(opts, out, "name")
	return *ret0, err
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) Name() (string, error) {
	return _MainnetERC721XCardsContract.Contract.Name(&_MainnetERC721XCardsContract.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCallerSession) Name() (string, error) {
	return _MainnetERC721XCardsContract.Contract.Name(&_MainnetERC721XCardsContract.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(_tokenId uint256) constant returns(address)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCaller) OwnerOf(opts *bind.CallOpts, _tokenId *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MainnetERC721XCardsContract.contract.Call(opts, out, "ownerOf", _tokenId)
	return *ret0, err
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(_tokenId uint256) constant returns(address)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) OwnerOf(_tokenId *big.Int) (common.Address, error) {
	return _MainnetERC721XCardsContract.Contract.OwnerOf(&_MainnetERC721XCardsContract.CallOpts, _tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(_tokenId uint256) constant returns(address)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCallerSession) OwnerOf(_tokenId *big.Int) (common.Address, error) {
	return _MainnetERC721XCardsContract.Contract.OwnerOf(&_MainnetERC721XCardsContract.CallOpts, _tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(interfaceId bytes4) constant returns(bool)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _MainnetERC721XCardsContract.contract.Call(opts, out, "supportsInterface", interfaceId)
	return *ret0, err
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(interfaceId bytes4) constant returns(bool)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _MainnetERC721XCardsContract.Contract.SupportsInterface(&_MainnetERC721XCardsContract.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(interfaceId bytes4) constant returns(bool)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _MainnetERC721XCardsContract.Contract.SupportsInterface(&_MainnetERC721XCardsContract.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() constant returns(string)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _MainnetERC721XCardsContract.contract.Call(opts, out, "symbol")
	return *ret0, err
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() constant returns(string)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) Symbol() (string, error) {
	return _MainnetERC721XCardsContract.Contract.Symbol(&_MainnetERC721XCardsContract.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() constant returns(string)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCallerSession) Symbol() (string, error) {
	return _MainnetERC721XCardsContract.Contract.Symbol(&_MainnetERC721XCardsContract.CallOpts)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(_index uint256) constant returns(uint256)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCaller) TokenByIndex(opts *bind.CallOpts, _index *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MainnetERC721XCardsContract.contract.Call(opts, out, "tokenByIndex", _index)
	return *ret0, err
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(_index uint256) constant returns(uint256)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) TokenByIndex(_index *big.Int) (*big.Int, error) {
	return _MainnetERC721XCardsContract.Contract.TokenByIndex(&_MainnetERC721XCardsContract.CallOpts, _index)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(_index uint256) constant returns(uint256)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCallerSession) TokenByIndex(_index *big.Int) (*big.Int, error) {
	return _MainnetERC721XCardsContract.Contract.TokenByIndex(&_MainnetERC721XCardsContract.CallOpts, _index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(_owner address, _index uint256) constant returns(_tokenId uint256)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCaller) TokenOfOwnerByIndex(opts *bind.CallOpts, _owner common.Address, _index *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MainnetERC721XCardsContract.contract.Call(opts, out, "tokenOfOwnerByIndex", _owner, _index)
	return *ret0, err
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(_owner address, _index uint256) constant returns(_tokenId uint256)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) TokenOfOwnerByIndex(_owner common.Address, _index *big.Int) (*big.Int, error) {
	return _MainnetERC721XCardsContract.Contract.TokenOfOwnerByIndex(&_MainnetERC721XCardsContract.CallOpts, _owner, _index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(_owner address, _index uint256) constant returns(_tokenId uint256)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCallerSession) TokenOfOwnerByIndex(_owner common.Address, _index *big.Int) (*big.Int, error) {
	return _MainnetERC721XCardsContract.Contract.TokenOfOwnerByIndex(&_MainnetERC721XCardsContract.CallOpts, _owner, _index)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(_tokenId uint256) constant returns(string)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCaller) TokenURI(opts *bind.CallOpts, _tokenId *big.Int) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _MainnetERC721XCardsContract.contract.Call(opts, out, "tokenURI", _tokenId)
	return *ret0, err
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(_tokenId uint256) constant returns(string)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) TokenURI(_tokenId *big.Int) (string, error) {
	return _MainnetERC721XCardsContract.Contract.TokenURI(&_MainnetERC721XCardsContract.CallOpts, _tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(_tokenId uint256) constant returns(string)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCallerSession) TokenURI(_tokenId *big.Int) (string, error) {
	return _MainnetERC721XCardsContract.Contract.TokenURI(&_MainnetERC721XCardsContract.CallOpts, _tokenId)
}

// TokensOwned is a free data retrieval call binding the contract method 0x21cda790.
//
// Solidity: function tokensOwned(_owner address) constant returns(indexes uint256[], balances uint256[])
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCaller) TokensOwned(opts *bind.CallOpts, _owner common.Address) (struct {
	Indexes  []*big.Int
	Balances []*big.Int
}, error) {
	ret := new(struct {
		Indexes  []*big.Int
		Balances []*big.Int
	})
	out := ret
	err := _MainnetERC721XCardsContract.contract.Call(opts, out, "tokensOwned", _owner)
	return *ret, err
}

// TokensOwned is a free data retrieval call binding the contract method 0x21cda790.
//
// Solidity: function tokensOwned(_owner address) constant returns(indexes uint256[], balances uint256[])
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) TokensOwned(_owner common.Address) (struct {
	Indexes  []*big.Int
	Balances []*big.Int
}, error) {
	return _MainnetERC721XCardsContract.Contract.TokensOwned(&_MainnetERC721XCardsContract.CallOpts, _owner)
}

// TokensOwned is a free data retrieval call binding the contract method 0x21cda790.
//
// Solidity: function tokensOwned(_owner address) constant returns(indexes uint256[], balances uint256[])
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCallerSession) TokensOwned(_owner common.Address) (struct {
	Indexes  []*big.Int
	Balances []*big.Int
}, error) {
	return _MainnetERC721XCardsContract.Contract.TokensOwned(&_MainnetERC721XCardsContract.CallOpts, _owner)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() constant returns(uint256)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MainnetERC721XCardsContract.contract.Call(opts, out, "totalSupply")
	return *ret0, err
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() constant returns(uint256)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) TotalSupply() (*big.Int, error) {
	return _MainnetERC721XCardsContract.Contract.TotalSupply(&_MainnetERC721XCardsContract.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() constant returns(uint256)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCallerSession) TotalSupply() (*big.Int, error) {
	return _MainnetERC721XCardsContract.Contract.TotalSupply(&_MainnetERC721XCardsContract.CallOpts)
}

// Airdrop is a paid mutator transaction binding the contract method 0x092154b1.
//
// Solidity: function airdrop(tokenIds uint256[], amounts uint256[], receivers address[]) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactor) Airdrop(opts *bind.TransactOpts, tokenIds []*big.Int, amounts []*big.Int, receivers []common.Address) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.contract.Transact(opts, "airdrop", tokenIds, amounts, receivers)
}

// Airdrop is a paid mutator transaction binding the contract method 0x092154b1.
//
// Solidity: function airdrop(tokenIds uint256[], amounts uint256[], receivers address[]) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) Airdrop(tokenIds []*big.Int, amounts []*big.Int, receivers []common.Address) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.Airdrop(&_MainnetERC721XCardsContract.TransactOpts, tokenIds, amounts, receivers)
}

// Airdrop is a paid mutator transaction binding the contract method 0x092154b1.
//
// Solidity: function airdrop(tokenIds uint256[], amounts uint256[], receivers address[]) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactorSession) Airdrop(tokenIds []*big.Int, amounts []*big.Int, receivers []common.Address) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.Airdrop(&_MainnetERC721XCardsContract.TransactOpts, tokenIds, amounts, receivers)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(_to address, _tokenId uint256) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactor) Approve(opts *bind.TransactOpts, _to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.contract.Transact(opts, "approve", _to, _tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(_to address, _tokenId uint256) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) Approve(_to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.Approve(&_MainnetERC721XCardsContract.TransactOpts, _to, _tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(_to address, _tokenId uint256) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactorSession) Approve(_to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.Approve(&_MainnetERC721XCardsContract.TransactOpts, _to, _tokenId)
}

// BatchTransferFrom is a paid mutator transaction binding the contract method 0x17fad7fc.
//
// Solidity: function batchTransferFrom(_from address, _to address, _tokenIds uint256[], _amounts uint256[]) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactor) BatchTransferFrom(opts *bind.TransactOpts, _from common.Address, _to common.Address, _tokenIds []*big.Int, _amounts []*big.Int) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.contract.Transact(opts, "batchTransferFrom", _from, _to, _tokenIds, _amounts)
}

// BatchTransferFrom is a paid mutator transaction binding the contract method 0x17fad7fc.
//
// Solidity: function batchTransferFrom(_from address, _to address, _tokenIds uint256[], _amounts uint256[]) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) BatchTransferFrom(_from common.Address, _to common.Address, _tokenIds []*big.Int, _amounts []*big.Int) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.BatchTransferFrom(&_MainnetERC721XCardsContract.TransactOpts, _from, _to, _tokenIds, _amounts)
}

// BatchTransferFrom is a paid mutator transaction binding the contract method 0x17fad7fc.
//
// Solidity: function batchTransferFrom(_from address, _to address, _tokenIds uint256[], _amounts uint256[]) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactorSession) BatchTransferFrom(_from common.Address, _to common.Address, _tokenIds []*big.Int, _amounts []*big.Int) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.BatchTransferFrom(&_MainnetERC721XCardsContract.TransactOpts, _from, _to, _tokenIds, _amounts)
}

// DepositToGateway is a paid mutator transaction binding the contract method 0x45f0edb7.
//
// Solidity: function depositToGateway(_tokenId uint256, amount uint256) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactor) DepositToGateway(opts *bind.TransactOpts, _tokenId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.contract.Transact(opts, "depositToGateway", _tokenId, amount)
}

// DepositToGateway is a paid mutator transaction binding the contract method 0x45f0edb7.
//
// Solidity: function depositToGateway(_tokenId uint256, amount uint256) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) DepositToGateway(_tokenId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.DepositToGateway(&_MainnetERC721XCardsContract.TransactOpts, _tokenId, amount)
}

// DepositToGateway is a paid mutator transaction binding the contract method 0x45f0edb7.
//
// Solidity: function depositToGateway(_tokenId uint256, amount uint256) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactorSession) DepositToGateway(_tokenId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.DepositToGateway(&_MainnetERC721XCardsContract.TransactOpts, _tokenId, amount)
}

// DepositToGatewayNFT is a paid mutator transaction binding the contract method 0xa5d2827d.
//
// Solidity: function depositToGatewayNFT(_tokenId uint256) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactor) DepositToGatewayNFT(opts *bind.TransactOpts, _tokenId *big.Int) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.contract.Transact(opts, "depositToGatewayNFT", _tokenId)
}

// DepositToGatewayNFT is a paid mutator transaction binding the contract method 0xa5d2827d.
//
// Solidity: function depositToGatewayNFT(_tokenId uint256) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) DepositToGatewayNFT(_tokenId *big.Int) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.DepositToGatewayNFT(&_MainnetERC721XCardsContract.TransactOpts, _tokenId)
}

// DepositToGatewayNFT is a paid mutator transaction binding the contract method 0xa5d2827d.
//
// Solidity: function depositToGatewayNFT(_tokenId uint256) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactorSession) DepositToGatewayNFT(_tokenId *big.Int) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.DepositToGatewayNFT(&_MainnetERC721XCardsContract.TransactOpts, _tokenId)
}

// Mint is a paid mutator transaction binding the contract method 0x94bf804d.
//
// Solidity: function mint(_tokenId uint256, _to address) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactor) Mint(opts *bind.TransactOpts, _tokenId *big.Int, _to common.Address) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.contract.Transact(opts, "mint", _tokenId, _to)
}

// Mint is a paid mutator transaction binding the contract method 0x94bf804d.
//
// Solidity: function mint(_tokenId uint256, _to address) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) Mint(_tokenId *big.Int, _to common.Address) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.Mint(&_MainnetERC721XCardsContract.TransactOpts, _tokenId, _to)
}

// Mint is a paid mutator transaction binding the contract method 0x94bf804d.
//
// Solidity: function mint(_tokenId uint256, _to address) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactorSession) Mint(_tokenId *big.Int, _to common.Address) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.Mint(&_MainnetERC721XCardsContract.TransactOpts, _tokenId, _to)
}

// MintTokens is a paid mutator transaction binding the contract method 0x6831e272.
//
// Solidity: function mintTokens(_to address, _tokenId uint256, _amount uint256) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactor) MintTokens(opts *bind.TransactOpts, _to common.Address, _tokenId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.contract.Transact(opts, "mintTokens", _to, _tokenId, _amount)
}

// MintTokens is a paid mutator transaction binding the contract method 0x6831e272.
//
// Solidity: function mintTokens(_to address, _tokenId uint256, _amount uint256) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) MintTokens(_to common.Address, _tokenId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.MintTokens(&_MainnetERC721XCardsContract.TransactOpts, _to, _tokenId, _amount)
}

// MintTokens is a paid mutator transaction binding the contract method 0x6831e272.
//
// Solidity: function mintTokens(_to address, _tokenId uint256, _amount uint256) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactorSession) MintTokens(_to common.Address, _tokenId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.MintTokens(&_MainnetERC721XCardsContract.TransactOpts, _to, _tokenId, _amount)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(_from address, _to address, _tokenIds uint256[], _amounts uint256[], _data bytes) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactor) SafeBatchTransferFrom(opts *bind.TransactOpts, _from common.Address, _to common.Address, _tokenIds []*big.Int, _amounts []*big.Int, _data []byte) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.contract.Transact(opts, "safeBatchTransferFrom", _from, _to, _tokenIds, _amounts, _data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(_from address, _to address, _tokenIds uint256[], _amounts uint256[], _data bytes) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) SafeBatchTransferFrom(_from common.Address, _to common.Address, _tokenIds []*big.Int, _amounts []*big.Int, _data []byte) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.SafeBatchTransferFrom(&_MainnetERC721XCardsContract.TransactOpts, _from, _to, _tokenIds, _amounts, _data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(_from address, _to address, _tokenIds uint256[], _amounts uint256[], _data bytes) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactorSession) SafeBatchTransferFrom(_from common.Address, _to common.Address, _tokenIds []*big.Int, _amounts []*big.Int, _data []byte) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.SafeBatchTransferFrom(&_MainnetERC721XCardsContract.TransactOpts, _from, _to, _tokenIds, _amounts, _data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(_from address, _to address, _tokenId uint256, _amount uint256, _data bytes) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactor) SafeTransferFrom(opts *bind.TransactOpts, _from common.Address, _to common.Address, _tokenId *big.Int, _amount *big.Int, _data []byte) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.contract.Transact(opts, "safeTransferFrom", _from, _to, _tokenId, _amount, _data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(_from address, _to address, _tokenId uint256, _amount uint256, _data bytes) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) SafeTransferFrom(_from common.Address, _to common.Address, _tokenId *big.Int, _amount *big.Int, _data []byte) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.SafeTransferFrom(&_MainnetERC721XCardsContract.TransactOpts, _from, _to, _tokenId, _amount, _data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(_from address, _to address, _tokenId uint256, _amount uint256, _data bytes) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactorSession) SafeTransferFrom(_from common.Address, _to common.Address, _tokenId *big.Int, _amount *big.Int, _data []byte) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.SafeTransferFrom(&_MainnetERC721XCardsContract.TransactOpts, _from, _to, _tokenId, _amount, _data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(_operator address, _approved bool) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactor) SetApprovalForAll(opts *bind.TransactOpts, _operator common.Address, _approved bool) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.contract.Transact(opts, "setApprovalForAll", _operator, _approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(_operator address, _approved bool) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) SetApprovalForAll(_operator common.Address, _approved bool) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.SetApprovalForAll(&_MainnetERC721XCardsContract.TransactOpts, _operator, _approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(_operator address, _approved bool) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactorSession) SetApprovalForAll(_operator common.Address, _approved bool) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.SetApprovalForAll(&_MainnetERC721XCardsContract.TransactOpts, _operator, _approved)
}

// Transfer is a paid mutator transaction binding the contract method 0x095bcdb6.
//
// Solidity: function transfer(_to address, _tokenId uint256, _amount uint256) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactor) Transfer(opts *bind.TransactOpts, _to common.Address, _tokenId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.contract.Transact(opts, "transfer", _to, _tokenId, _amount)
}

// Transfer is a paid mutator transaction binding the contract method 0x095bcdb6.
//
// Solidity: function transfer(_to address, _tokenId uint256, _amount uint256) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) Transfer(_to common.Address, _tokenId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.Transfer(&_MainnetERC721XCardsContract.TransactOpts, _to, _tokenId, _amount)
}

// Transfer is a paid mutator transaction binding the contract method 0x095bcdb6.
//
// Solidity: function transfer(_to address, _tokenId uint256, _amount uint256) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactorSession) Transfer(_to common.Address, _tokenId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.Transfer(&_MainnetERC721XCardsContract.TransactOpts, _to, _tokenId, _amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0xfe99049a.
//
// Solidity: function transferFrom(_from address, _to address, _tokenId uint256, _amount uint256) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactor) TransferFrom(opts *bind.TransactOpts, _from common.Address, _to common.Address, _tokenId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.contract.Transact(opts, "transferFrom", _from, _to, _tokenId, _amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0xfe99049a.
//
// Solidity: function transferFrom(_from address, _to address, _tokenId uint256, _amount uint256) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) TransferFrom(_from common.Address, _to common.Address, _tokenId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.TransferFrom(&_MainnetERC721XCardsContract.TransactOpts, _from, _to, _tokenId, _amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0xfe99049a.
//
// Solidity: function transferFrom(_from address, _to address, _tokenId uint256, _amount uint256) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactorSession) TransferFrom(_from common.Address, _to common.Address, _tokenId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.TransferFrom(&_MainnetERC721XCardsContract.TransactOpts, _from, _to, _tokenId, _amount)
}

// MainnetERC721XCardsContractApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the MainnetERC721XCardsContract contract.
type MainnetERC721XCardsContractApprovalIterator struct {
	Event *MainnetERC721XCardsContractApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MainnetERC721XCardsContractApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MainnetERC721XCardsContractApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MainnetERC721XCardsContractApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MainnetERC721XCardsContractApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MainnetERC721XCardsContractApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MainnetERC721XCardsContractApproval represents a Approval event raised by the MainnetERC721XCardsContract contract.
type MainnetERC721XCardsContractApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: e Approval(owner indexed address, approved indexed address, tokenId indexed uint256)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*MainnetERC721XCardsContractApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _MainnetERC721XCardsContract.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &MainnetERC721XCardsContractApprovalIterator{contract: _MainnetERC721XCardsContract.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: e Approval(owner indexed address, approved indexed address, tokenId indexed uint256)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *MainnetERC721XCardsContractApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _MainnetERC721XCardsContract.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MainnetERC721XCardsContractApproval)
				if err := _MainnetERC721XCardsContract.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MainnetERC721XCardsContractApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the MainnetERC721XCardsContract contract.
type MainnetERC721XCardsContractApprovalForAllIterator struct {
	Event *MainnetERC721XCardsContractApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MainnetERC721XCardsContractApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MainnetERC721XCardsContractApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MainnetERC721XCardsContractApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MainnetERC721XCardsContractApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MainnetERC721XCardsContractApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MainnetERC721XCardsContractApprovalForAll represents a ApprovalForAll event raised by the MainnetERC721XCardsContract contract.
type MainnetERC721XCardsContractApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: e ApprovalForAll(owner indexed address, operator indexed address, approved bool)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*MainnetERC721XCardsContractApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _MainnetERC721XCardsContract.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &MainnetERC721XCardsContractApprovalForAllIterator{contract: _MainnetERC721XCardsContract.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: e ApprovalForAll(owner indexed address, operator indexed address, approved bool)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *MainnetERC721XCardsContractApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _MainnetERC721XCardsContract.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MainnetERC721XCardsContractApprovalForAll)
				if err := _MainnetERC721XCardsContract.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MainnetERC721XCardsContractBatchTransferIterator is returned from FilterBatchTransfer and is used to iterate over the raw logs and unpacked data for BatchTransfer events raised by the MainnetERC721XCardsContract contract.
type MainnetERC721XCardsContractBatchTransferIterator struct {
	Event *MainnetERC721XCardsContractBatchTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MainnetERC721XCardsContractBatchTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MainnetERC721XCardsContractBatchTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MainnetERC721XCardsContractBatchTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MainnetERC721XCardsContractBatchTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MainnetERC721XCardsContractBatchTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MainnetERC721XCardsContractBatchTransfer represents a BatchTransfer event raised by the MainnetERC721XCardsContract contract.
type MainnetERC721XCardsContractBatchTransfer struct {
	From       common.Address
	To         common.Address
	TokenTypes []*big.Int
	Amounts    []*big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterBatchTransfer is a free log retrieval operation binding the contract event 0xf59807b2c31ca3ba212e90599175c120c556422950bac5be656274483e8581df.
//
// Solidity: e BatchTransfer(from address, to address, tokenTypes uint256[], amounts uint256[])
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractFilterer) FilterBatchTransfer(opts *bind.FilterOpts) (*MainnetERC721XCardsContractBatchTransferIterator, error) {

	logs, sub, err := _MainnetERC721XCardsContract.contract.FilterLogs(opts, "BatchTransfer")
	if err != nil {
		return nil, err
	}
	return &MainnetERC721XCardsContractBatchTransferIterator{contract: _MainnetERC721XCardsContract.contract, event: "BatchTransfer", logs: logs, sub: sub}, nil
}

// WatchBatchTransfer is a free log subscription operation binding the contract event 0xf59807b2c31ca3ba212e90599175c120c556422950bac5be656274483e8581df.
//
// Solidity: e BatchTransfer(from address, to address, tokenTypes uint256[], amounts uint256[])
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractFilterer) WatchBatchTransfer(opts *bind.WatchOpts, sink chan<- *MainnetERC721XCardsContractBatchTransfer) (event.Subscription, error) {

	logs, sub, err := _MainnetERC721XCardsContract.contract.WatchLogs(opts, "BatchTransfer")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MainnetERC721XCardsContractBatchTransfer)
				if err := _MainnetERC721XCardsContract.contract.UnpackLog(event, "BatchTransfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MainnetERC721XCardsContractTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the MainnetERC721XCardsContract contract.
type MainnetERC721XCardsContractTransferIterator struct {
	Event *MainnetERC721XCardsContractTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MainnetERC721XCardsContractTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MainnetERC721XCardsContractTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MainnetERC721XCardsContractTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MainnetERC721XCardsContractTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MainnetERC721XCardsContractTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MainnetERC721XCardsContractTransfer represents a Transfer event raised by the MainnetERC721XCardsContract contract.
type MainnetERC721XCardsContractTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: e Transfer(from indexed address, to indexed address, tokenId indexed uint256)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*MainnetERC721XCardsContractTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _MainnetERC721XCardsContract.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &MainnetERC721XCardsContractTransferIterator{contract: _MainnetERC721XCardsContract.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: e Transfer(from indexed address, to indexed address, tokenId indexed uint256)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *MainnetERC721XCardsContractTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _MainnetERC721XCardsContract.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MainnetERC721XCardsContractTransfer)
				if err := _MainnetERC721XCardsContract.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MainnetERC721XCardsContractTransferWithQuantityIterator is returned from FilterTransferWithQuantity and is used to iterate over the raw logs and unpacked data for TransferWithQuantity events raised by the MainnetERC721XCardsContract contract.
type MainnetERC721XCardsContractTransferWithQuantityIterator struct {
	Event *MainnetERC721XCardsContractTransferWithQuantity // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MainnetERC721XCardsContractTransferWithQuantityIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MainnetERC721XCardsContractTransferWithQuantity)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MainnetERC721XCardsContractTransferWithQuantity)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MainnetERC721XCardsContractTransferWithQuantityIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MainnetERC721XCardsContractTransferWithQuantityIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MainnetERC721XCardsContractTransferWithQuantity represents a TransferWithQuantity event raised by the MainnetERC721XCardsContract contract.
type MainnetERC721XCardsContractTransferWithQuantity struct {
	From     common.Address
	To       common.Address
	TokenId  *big.Int
	Quantity *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferWithQuantity is a free log retrieval operation binding the contract event 0x2114851a3e2a54429989f46c1ab0743e37ded205d9bbdfd85635aed5bd595a06.
//
// Solidity: e TransferWithQuantity(from indexed address, to indexed address, tokenId indexed uint256, quantity uint256)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractFilterer) FilterTransferWithQuantity(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*MainnetERC721XCardsContractTransferWithQuantityIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _MainnetERC721XCardsContract.contract.FilterLogs(opts, "TransferWithQuantity", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &MainnetERC721XCardsContractTransferWithQuantityIterator{contract: _MainnetERC721XCardsContract.contract, event: "TransferWithQuantity", logs: logs, sub: sub}, nil
}

// WatchTransferWithQuantity is a free log subscription operation binding the contract event 0x2114851a3e2a54429989f46c1ab0743e37ded205d9bbdfd85635aed5bd595a06.
//
// Solidity: e TransferWithQuantity(from indexed address, to indexed address, tokenId indexed uint256, quantity uint256)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractFilterer) WatchTransferWithQuantity(opts *bind.WatchOpts, sink chan<- *MainnetERC721XCardsContractTransferWithQuantity, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _MainnetERC721XCardsContract.contract.WatchLogs(opts, "TransferWithQuantity", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MainnetERC721XCardsContractTransferWithQuantity)
				if err := _MainnetERC721XCardsContract.contract.UnpackLog(event, "TransferWithQuantity", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

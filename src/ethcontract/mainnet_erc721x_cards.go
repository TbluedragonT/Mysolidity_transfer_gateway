// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethcontract

import (
	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"math/big"
	"strings"
)

// MainnetERC721XCardsContractABI is the input ABI used to generate the binding from.
const MainnetERC721XCardsContractABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gateway\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InterfaceId_ERC165\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOwned\",\"outputs\":[{\"name\":\"indexes\",\"type\":\"uint256[]\"},{\"name\":\"balances\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721X\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"tokenUri\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"isOperator\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_gateway\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenTypes\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"BatchTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"TransferWithQuantity\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"name\":\"receivers\",\"type\":\"address[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_supply\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"depositToGatewayNFT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToGateway\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"balanceOfToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// MainnetERC721XCardsContractBin is the compiled bytecode used for deploying new contracts.
const MainnetERC721XCardsContractBin = `0x60806040523480156200001157600080fd5b5060405160208062002a918339810160405251620000587f01ffc9a700000000000000000000000000000000000000000000000000000000640100000000620000c0810204565b6200008c7f5b5e139f00000000000000000000000000000000000000000000000000000000640100000000620000c0810204565b6007805433600160a060020a03199182161790915560088054909116600160a060020a03929092169190911790556200012d565b7fffffffff000000000000000000000000000000000000000000000000000000008082161415620000f057600080fd5b7fffffffff00000000000000000000000000000000000000000000000000000000166000908152602081905260409020805460ff19166001179055565b612954806200013d6000396000f3006080604052600436106101c05763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041662fdd58e81146101c557806301ffc9a7146101fb57806306fdde0314610231578063081812fc146102bb578063092154b1146102ef578063095bcdb6146103b8578063095ea7b3146103df5780630febdd49146104035780631051db3414610430578063116191b61461044557806317fad7fc1461045a57806318160ddd146104fe57806319fa8f501461051357806321cda7901461054557806323b872dd146105ff5780632eb2c2d6146106295780632f745c591461070b57806342842e0e1461072f57806345f0edb7146107595780634f558e79146107745780634f6ccce71461078c5780636352211e146107a45780636831e272146107bc57806370a08231146107e35780637fb42a3614610430578063836a10401461080457806394bf804d1461082b57806395d89b411461084f578063a22cb46514610864578063a5d2827d1461088a578063b88d4fde146108a2578063c87b56dd14610911578063e380b7bd14610929578063e985e9c51461094d578063f242432a14610974578063fe99049a146109eb575b600080fd5b3480156101d157600080fd5b506101e9600160a060020a0360043516602435610a18565b60408051918252519081900360200190f35b34801561020757600080fd5b5061021d600160e060020a031960043516610a68565b604080519115158252519081900360200190f35b34801561023d57600080fd5b50610246610a87565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610280578181015183820152602001610268565b50505050905090810190601f1680156102ad5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102c757600080fd5b506102d3600435610abe565b60408051600160a060020a039092168252519081900360200190f35b3480156102fb57600080fd5b50604080516020600480358082013583810280860185019096528085526103b695369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750610ad99650505050505050565b005b3480156103c457600080fd5b506103b6600160a060020a0360043516602435604435610c0f565b3480156103eb57600080fd5b506103b6600160a060020a0360043516602435610c20565b34801561040f57600080fd5b506103b6600160a060020a0360043581169060243516604435606435610cd6565b34801561043c57600080fd5b5061021d610cf9565b34801561045157600080fd5b506102d3610cfe565b34801561046657600080fd5b5060408051602060046044358181013583810280860185019096528085526103b6958335600160a060020a039081169660248035909216963696956064959294930192829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750610d0d9650505050505050565b34801561050a57600080fd5b506101e9610d19565b34801561051f57600080fd5b50610528610d1f565b60408051600160e060020a03199092168252519081900360200190f35b34801561055157600080fd5b50610566600160a060020a0360043516610d43565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156105aa578181015183820152602001610592565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156105e95781810151838201526020016105d1565b5050505090500194505050505060405180910390f35b34801561060b57600080fd5b506103b6600160a060020a0360043581169060243516604435610f20565b34801561063557600080fd5b5060408051602060046044358181013583810280860185019096528085526103b6958335600160a060020a039081169660248035909216963696956064959294930192829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750610f2b9650505050505050565b34801561071757600080fd5b506101e9600160a060020a0360043516602435611122565b34801561073b57600080fd5b506103b6600160a060020a036004358116906024351660443561112a565b34801561076557600080fd5b506103b6600435602435611146565b34801561078057600080fd5b5061021d6004356111c9565b34801561079857600080fd5b506101e96004356111dd565b3480156107b057600080fd5b506102d3600435611212565b3480156107c857600080fd5b506103b6600160a060020a036004351660243560443561129c565b3480156107ef57600080fd5b506101e9600160a060020a03600435166112dc565b34801561081057600080fd5b506103b6600435600160a060020a03602435166044356112f2565b34801561083757600080fd5b506103b6600435600160a060020a03602435166112fd565b34801561085b57600080fd5b50610246611307565b34801561087057600080fd5b506103b6600160a060020a0360043516602435151561133e565b34801561089657600080fd5b506103b66004356113ac565b3480156108ae57600080fd5b50604080516020601f6064356004818101359283018490048402850184019095528184526103b694600160a060020a03813581169560248035909216956044359536956084940191819084018382808284375094975061142d9650505050505050565b34801561091d57600080fd5b506102466004356114c0565b34801561093557600080fd5b506101e9600160a060020a03600435166024356116d7565b34801561095957600080fd5b5061021d600160a060020a03600435811690602435166116ea565b34801561098057600080fd5b50604080516020601f6084356004818101359283018490048402850184019095528184526103b694600160a060020a0381358116956024803590921695604435956064359536959460a494939101919081908401838280828437509497506117189650505050505050565b3480156109f757600080fd5b506103b6600160a060020a03600435811690602435166044356064356117ad565b6000806000610a26846117b9565b600160a060020a03871660009081526002602090815260408083208584529091529020549193509150610a5f908263ffffffff6117ca16565b95945050505050565b600160e060020a03191660009081526020819052604090205460ff1690565b60408051808201909152600c81527f4552433732315843617264730000000000000000000000000000000000000000602082015290565b600090815260056020526040902054600160a060020a031690565b60008083518551148015610aee575082518551145b1515610b44576040805160e560020a62461bcd02815260206004820152601460248201527f4c656e6774687320646f206e6f74206d61746368000000000000000000000000604482015290519081900360640190fd5b5050825160005b81811015610c08578381815181101515610b6157fe5b9060200190602002015160011415610bb057610bab8582815181101515610b8457fe5b906020019060200201518483815181101515610b9c57fe5b906020019060200201516117e0565b610c00565b610c008582815181101515610bc157fe5b906020019060200201518483815181101515610bd957fe5b906020019060200201518684815181101515610bf157fe5b90602001906020020151611904565b600101610b4b565b5050505050565b610c1b33848484611a15565b505050565b6000610c2b82611212565b9050600160a060020a038381169082161415610c4657600080fd5b33600160a060020a0382161480610c625750610c6281336116ea565b1515610c6d57600080fd5b600082815260056020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b610cf3848484846020604051908101604052806000815250611718565b50505050565b600190565b600854600160a060020a031681565b610cf384848484611c3b565b60015490565b7f01ffc9a70000000000000000000000000000000000000000000000000000000081565b60608060006060806000806000606080610d5b610d19565b975087604051908082528060200260200182016040528015610d87578160200160208202803883390190505b50965087604051908082528060200260200182016040528015610db4578160200160208202803883390190505b509550600093505b87841015610e3f576001805485908110610dd257fe5b906000526020600020015492506000610deb8c85610a18565b1115610e3457610dfb8b84610a18565b8686815181101515610e0957fe5b6020908102909101015286518390889087908110610e2357fe5b602090810290910101526001909401935b600190930192610dbc565b84604051908082528060200260200182016040528015610e69578160200160208202803883390190505b50915084604051908082528060200260200182016040528015610e96578160200160208202803883390190505b509050600093505b84841015610f11578584815181101515610eb457fe5b906020019060200201518285815181101515610ecc57fe5b602090810290910101528651879085908110610ee457fe5b906020019060200201518185815181101515610efc57fe5b60209081029091010152600190930192610e9e565b9a909950975050505050505050565b610c1b838383612292565b6000610f3986868686611c3b565b610f4b85600160a060020a031661239e565b1561111a576040517fb3b0f4c70000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a03898116602485015260a060448501908152885160a48601528851918a169463b3b0f4c794938c938b938b938b93926064820191608481019160c4909101906020808a01910280838360005b83811015610fe9578181015183820152602001610fd1565b50505050905001848103835286818151815260200191508051906020019060200280838360005b83811015611028578181015183820152602001611010565b50505050905001848103825285818151815260200191508051906020019080838360005b8381101561106457818101518382015260200161104c565b50505050905090810190601f1680156110915780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b1580156110b657600080fd5b505af11580156110ca573d6000803e3d6000fd5b505050506040513d60208110156110e057600080fd5b50519050600160e060020a031981167fe9e5be6a000000000000000000000000000000000000000000000000000000001461111a57600080fd5b505050505050565b600092915050565b610c1b838383602060405190810160405280600081525061142d565b6000828152600660205260409020546002146111ac576040805160e560020a62461bcd02815260206004820152601e60248201527f596f7520617265206e6f74207472616e7366657272696e672061202046540000604482015290519081900360640190fd5b6008546111c5903390600160a060020a03168484610cd6565b5050565b600090815260066020526040902054151590565b60006111e7610d19565b82106111f257600080fd5b600180548390811061120057fe5b90600052602060002001549050919050565b600081815260036020526040812054600160a060020a03161515611280576040805160e560020a62461bcd02815260206004820152601360248201527f436f696e20646f6573206e6f7420657869737400000000000000000000000000604482015290519081900360640190fd5b50600090815260036020526040902054600160a060020a031690565b600754600090600160a060020a031633146112b657600080fd5b6112c08484610a18565b9050610cf383856112d7848663ffffffff6123a616565b611904565b600060606112e983610d43565b51949350505050565b610c1b838383611904565b6111c582826117e0565b60408051808201909152600481527f5843524400000000000000000000000000000000000000000000000000000000602082015290565b336000818152600460209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b600081815260066020526040902054600114611412576040805160e560020a62461bcd02815260206004820152601f60248201527f596f7520617265206e6f74207472616e7366657272696e67206120204e465400604482015290519081900360640190fd5b60085461142a903390600160a060020a03168361112a565b50565b611438848484612292565b611444848484846123b9565b1515610cf3576040805160e560020a62461bcd02815260206004820152603260248201527f53656e7420746f206120636f6e7472616374207768696368206973206e6f742060448201527f616e204552433732312072656365697665720000000000000000000000000000606482015290519081900360840190fd5b6060806114cc836111c9565b1515611522576040805160e560020a62461bcd02815260206004820152601360248201527f546f6b656e20646f65736e277420657869737400000000000000000000000000604482015290519081900360640190fd5b505060408051606081018252603181527f68747470733a2f2f72696e6b6562792e6c6f6f6d2e67616d65732f657263373260208201527f312f7a6d622f3030303030302e6a736f6e00000000000000000000000000000091810191909152807fff00000000000000000000000000000000000000000000000000000000000000600a620186a085040660300160f860020a0216600081901a604683015350600a61271084040660300160f860020a028160278151811015156115e057fe5b906020010190600160f860020a031916908160001a905350600a6103e884040660300160f860020a0281602881518110151561161857fe5b906020010190600160f860020a031916908160001a905350600a606484040660300160f860020a0281602981518110151561164f57fe5b906020010190600160f860020a031916908160001a905350600a8084040660300160f860020a0281602a81518110151561168557fe5b906020010190600160f860020a031916908160001a905350600a830660300160f860020a0281602b8151811015156116b957fe5b906020010190600160f860020a031916908160001a90535050919050565b60006116e38383610a18565b9392505050565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205460ff1690565b61172485858585611a15565b6117318585858585612526565b1515610c08576040805160e560020a62461bcd02815260206004820152603360248201527f53656e7420746f206120636f6e7472616374207768696368206973206e6f742060448201527f616e204552433732315820726563656976657200000000000000000000000000606482015290519081900360840190fd5b610cf384848484611a15565b610100601082020491600f90911690565b6001016010026101000360020a900461ffff1690565b6117e9826111c9565b15611864576040805160e560020a62461bcd02815260206004820152602760248201527f4572726f723a20547269656420746f206d696e74206475706c6963617465207460448201527f6f6b656e20696400000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b61187281836001600261269d565b6000828152600360209081526040808320805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0386169081179091556006909252808320600190819055805480820182559084527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60185905551849230916000805160206129098339815191529190a45050565b61190d836111c9565b151561195a5760008381526006602052604081206002905560018054808201825591527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6018390556119c0565b6000838152600660205260409020546002146119c0576040805160e560020a62461bcd02815260206004820152600860248201527f4e6f742061204654000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6119cd828483600061269d565b6040805182815290518491600160a060020a0385169130917f2114851a3e2a54429989f46c1ab0743e37ded205d9bbdfd85635aed5bd595a06919081900360200190a4505050565b8333600160a060020a0382161480611a505750600160a060020a038116600090815260046020908152604080832033845290915290205460ff165b1515611acc576040805160e560020a62461bcd02815260206004820152602860248201527f6d73672e73656e646572206973206e656974686572205f66726f6d206e6f722060448201527f6f70657261746f72000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600083815260066020526040902054600214611ae757600080fd5b611af18584610a18565b821115611b6e576040805160e560020a62461bcd02815260206004820152602260248201527f5175616e746974792067726561746572207468616e2066726f6d2062616c616e60448201527f6365000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a0384161515611bce576040805160e560020a62461bcd02815260206004820152601260248201527f496e76616c696420746f20616464726573730000000000000000000000000000604482015290519081900360640190fd5b611bdb858484600161269d565b611be8848484600061269d565b8284600160a060020a031686600160a060020a03167f2114851a3e2a54429989f46c1ab0743e37ded205d9bbdfd85635aed5bd595a06856040518082815260200191505060405180910390a45050505050565b60008080808080808a33600160a060020a0382161480611c7e5750600160a060020a038116600090815260046020908152604080832033845290915290205460ff165b1515611cfa576040805160e560020a62461bcd02815260206004820152602860248201527f6d73672e73656e646572206973206e656974686572205f66726f6d206e6f722060448201527f6f70657261746f72000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b88518a5114611d79576040805160e560020a62461bcd02815260206004820152602660248201527f496e636f6e73697374656e74206172726179206c656e6774682062657477656560448201527f6e20617267730000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a038b161515611dd9576040805160e560020a62461bcd02815260206004820152601160248201527f496e76616c696420726563697069656e74000000000000000000000000000000604482015290519081900360640190fd5b6001600660008c6000815181101515611dee57fe5b906020019060200201518152602001908152602001600020541415611ea5578a600360008c6000815181101515611e2157fe5b90602001906020020151815260200190815260200160002060006101000a815481600160a060020a030219169083600160a060020a03160217905550896000815181101515611e6c57fe5b906020019060200201518b600160a060020a03168d600160a060020a031660008051602061290983398151915260405160405180910390a45b611ec68a6000815181101515611eb757fe5b906020019060200201516117b9565b600160a060020a038e1660009081526002602090815260408083208584529091528120548c51939b50919950611f13928a918d918110611f0257fe5b906020019060200201516001612714565b600160a060020a038c1660009081526002602090815260408083208c84529091528120548b51929850611f609290918a918d91908110611f4f57fe5b906020019060200201516000612714565b945089519350879250600191505b8382101561211f576001600660008c85815181101515611f8a57fe5b90602001906020020151815260200190815260200160002054141561203f578a600360008c85815181101515611fbc57fe5b90602001906020020151815260200190815260200160002060006101000a815481600160a060020a030219169083600160a060020a03160217905550898281518110151561200657fe5b906020019060200201518b600160a060020a03168d600160a060020a031660008051602061290983398151915260405160405180910390a45b6120508a83815181101515611eb757fe5b90985096508288146120b857600160a060020a038c811660009081526002602081815260408084208885528083528185209b909b55938f1683529081528282209582528581528282209790975589815296865280872054939095529390942054909390928691905b6120e4878a848151811015156120ca57fe5b60209081029091010151889190600163ffffffff61271416565b9550612112878a848151811015156120f857fe5b60209081029091010151879190600063ffffffff61271416565b9450600190910190611f6e565b85600260008e600160a060020a0316600160a060020a0316815260200190815260200160002060008a81526020019081526020016000208190555084600260008d600160a060020a0316600160a060020a0316815260200190815260200160002060008a8152602001908152602001600020819055507ff59807b2c31ca3ba212e90599175c120c556422950bac5be656274483e8581df8c8c8c8c6040518085600160a060020a0316600160a060020a0316815260200184600160a060020a0316600160a060020a031681526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561222e578181015183820152602001612216565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561226d578181015183820152602001612255565b50505050905001965050505050505060405180910390a1505050505050505050505050565b6000818152600660205260409020546001146122ad57600080fd5b6122c0836122ba83611212565b836127fb565b15156122cb57600080fd5b600160a060020a038216151561232b576040805160e560020a62461bcd02815260206004820152601260248201527f496e76616c696420746f20616464726573730000000000000000000000000000604482015290519081900360640190fd5b61233983826000600261269d565b61234782826001600261269d565b600081815260036020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03868116918217909255915184939187169160008051602061290983398151915291a4505050565b6000903b1190565b818101828110156123b357fe5b92915050565b6000806123ce85600160a060020a031661239e565b15156123dd576001915061251d565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a03898116602485015260448401889052608060648501908152875160848601528751918a169463150b7a0294938c938b938b93909160a490910190602085019080838360005b83811015612470578181015183820152602001612458565b50505050905090810190601f16801561249d5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1580156124bf57600080fd5b505af11580156124d3573d6000803e3d6000fd5b505050506040513d60208110156124e957600080fd5b5051600160e060020a031981167f150b7a020000000000000000000000000000000000000000000000000000000014925090505b50949350505050565b60008061253b86600160a060020a031661239e565b151561254a5760019150612693565b6040517f93ba7daa0000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a038a81166024850152604484018990526064840188905260a060848501908152875160a48601528751918b16946393ba7daa94938d938c938c938c939260c490910190602085019080838360005b838110156125e55781810151838201526020016125cd565b50505050905090810190601f1680156126125780820380516001836020036101000a031916815260200191505b509650505050505050602060405180830381600087803b15801561263557600080fd5b505af1158015612649573d6000803e3d6000fd5b505050506040513d602081101561265f57600080fd5b5051600160e060020a031981167f660b33700000000000000000000000000000000000000000000000000000000014925090505b5095945050505050565b6000806126a9856117b9565b600160a060020a038816600090815260026020908152604080832085845290915290205491935091506126e49082868663ffffffff61271416565b600160a060020a039096166000908152600260209081526040808320948352939052919091209490945550505050565b6000808083600281111561272457fe5b14156127575761273486866117ca565b9050612750868661274b848863ffffffff6123a616565b61284e565b915061251d565b600183600281111561276557fe5b141561278c5761277586866117ca565b9050612750868661274b848863ffffffff6128f616565b600283600281111561279a57fe5b14156127ab5761275086868661284e565b6040805160e560020a62461bcd02815260206004820152601160248201527f496e76616c6964206f7065726174696f6e000000000000000000000000000000604482015290519081900360640190fd5b600082600160a060020a031684600160a060020a03161480612836575083600160a060020a031661282b83610abe565b600160a060020a0316145b80612846575061284683856116ea565b949350505050565b600080806201000084106128d2576040805160e560020a62461bcd02815260206004820152602360248201527f416d6f756e7420746f20777269746520696e2062696e20697320746f6f206c6160448201527f7267650000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b50505061ffff6001929092016010026101000360020a918202199290921691021790565b60008282111561290257fe5b509003905600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820d1c49117f78461cb1ab2589a74a1d771b091a59d9d2f543238f1172d98fdb0fa0029`

// DeployMainnetERC721XCardsContract deploys a new Ethereum contract, binding an instance of MainnetERC721XCardsContract to it.
func DeployMainnetERC721XCardsContract(auth *bind.TransactOpts, backend bind.ContractBackend, _gateway common.Address) (common.Address, *types.Transaction, *MainnetERC721XCardsContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MainnetERC721XCardsContractABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(MainnetERC721XCardsContractBin), backend, _gateway)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MainnetERC721XCardsContract{MainnetERC721XCardsContractCaller: MainnetERC721XCardsContractCaller{contract: contract}, MainnetERC721XCardsContractTransactor: MainnetERC721XCardsContractTransactor{contract: contract}, MainnetERC721XCardsContractFilterer: MainnetERC721XCardsContractFilterer{contract: contract}}, nil
}

// MainnetERC721XCardsContract is an auto generated Go binding around an Ethereum contract.
type MainnetERC721XCardsContract struct {
	MainnetERC721XCardsContractCaller     // Read-only binding to the contract
	MainnetERC721XCardsContractTransactor // Write-only binding to the contract
	MainnetERC721XCardsContractFilterer   // Log filterer for contract events
}

// MainnetERC721XCardsContractCaller is an auto generated read-only Go binding around an Ethereum contract.
type MainnetERC721XCardsContractCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MainnetERC721XCardsContractTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MainnetERC721XCardsContractTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MainnetERC721XCardsContractFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MainnetERC721XCardsContractFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MainnetERC721XCardsContractSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MainnetERC721XCardsContractSession struct {
	Contract     *MainnetERC721XCardsContract // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                // Call options to use throughout this session
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// MainnetERC721XCardsContractCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MainnetERC721XCardsContractCallerSession struct {
	Contract *MainnetERC721XCardsContractCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                      // Call options to use throughout this session
}

// MainnetERC721XCardsContractTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MainnetERC721XCardsContractTransactorSession struct {
	Contract     *MainnetERC721XCardsContractTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                      // Transaction auth options to use throughout this session
}

// MainnetERC721XCardsContractRaw is an auto generated low-level Go binding around an Ethereum contract.
type MainnetERC721XCardsContractRaw struct {
	Contract *MainnetERC721XCardsContract // Generic contract binding to access the raw methods on
}

// MainnetERC721XCardsContractCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MainnetERC721XCardsContractCallerRaw struct {
	Contract *MainnetERC721XCardsContractCaller // Generic read-only contract binding to access the raw methods on
}

// MainnetERC721XCardsContractTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MainnetERC721XCardsContractTransactorRaw struct {
	Contract *MainnetERC721XCardsContractTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMainnetERC721XCardsContract creates a new instance of MainnetERC721XCardsContract, bound to a specific deployed contract.
func NewMainnetERC721XCardsContract(address common.Address, backend bind.ContractBackend) (*MainnetERC721XCardsContract, error) {
	contract, err := bindMainnetERC721XCardsContract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MainnetERC721XCardsContract{MainnetERC721XCardsContractCaller: MainnetERC721XCardsContractCaller{contract: contract}, MainnetERC721XCardsContractTransactor: MainnetERC721XCardsContractTransactor{contract: contract}, MainnetERC721XCardsContractFilterer: MainnetERC721XCardsContractFilterer{contract: contract}}, nil
}

// NewMainnetERC721XCardsContractCaller creates a new read-only instance of MainnetERC721XCardsContract, bound to a specific deployed contract.
func NewMainnetERC721XCardsContractCaller(address common.Address, caller bind.ContractCaller) (*MainnetERC721XCardsContractCaller, error) {
	contract, err := bindMainnetERC721XCardsContract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MainnetERC721XCardsContractCaller{contract: contract}, nil
}

// NewMainnetERC721XCardsContractTransactor creates a new write-only instance of MainnetERC721XCardsContract, bound to a specific deployed contract.
func NewMainnetERC721XCardsContractTransactor(address common.Address, transactor bind.ContractTransactor) (*MainnetERC721XCardsContractTransactor, error) {
	contract, err := bindMainnetERC721XCardsContract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MainnetERC721XCardsContractTransactor{contract: contract}, nil
}

// NewMainnetERC721XCardsContractFilterer creates a new log filterer instance of MainnetERC721XCardsContract, bound to a specific deployed contract.
func NewMainnetERC721XCardsContractFilterer(address common.Address, filterer bind.ContractFilterer) (*MainnetERC721XCardsContractFilterer, error) {
	contract, err := bindMainnetERC721XCardsContract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MainnetERC721XCardsContractFilterer{contract: contract}, nil
}

// bindMainnetERC721XCardsContract binds a generic wrapper to an already deployed contract.
func bindMainnetERC721XCardsContract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MainnetERC721XCardsContractABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _MainnetERC721XCardsContract.Contract.MainnetERC721XCardsContractCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.MainnetERC721XCardsContractTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.MainnetERC721XCardsContractTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _MainnetERC721XCardsContract.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.contract.Transact(opts, method, params...)
}

// InterfaceIdERC165 is a free data retrieval call binding the contract method 0x19fa8f50.
//
// Solidity: function InterfaceId_ERC165() constant returns(bytes4)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCaller) InterfaceIdERC165(opts *bind.CallOpts) ([4]byte, error) {
	var (
		ret0 = new([4]byte)
	)
	out := ret0
	err := _MainnetERC721XCardsContract.contract.Call(opts, out, "InterfaceId_ERC165")
	return *ret0, err
}

// InterfaceIdERC165 is a free data retrieval call binding the contract method 0x19fa8f50.
//
// Solidity: function InterfaceId_ERC165() constant returns(bytes4)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) InterfaceIdERC165() ([4]byte, error) {
	return _MainnetERC721XCardsContract.Contract.InterfaceIdERC165(&_MainnetERC721XCardsContract.CallOpts)
}

// InterfaceIdERC165 is a free data retrieval call binding the contract method 0x19fa8f50.
//
// Solidity: function InterfaceId_ERC165() constant returns(bytes4)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCallerSession) InterfaceIdERC165() ([4]byte, error) {
	return _MainnetERC721XCardsContract.Contract.InterfaceIdERC165(&_MainnetERC721XCardsContract.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(_owner address) constant returns(balance uint256)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCaller) BalanceOf(opts *bind.CallOpts, _owner common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MainnetERC721XCardsContract.contract.Call(opts, out, "balanceOf", _owner)
	return *ret0, err
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(_owner address) constant returns(balance uint256)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) BalanceOf(_owner common.Address) (*big.Int, error) {
	return _MainnetERC721XCardsContract.Contract.BalanceOf(&_MainnetERC721XCardsContract.CallOpts, _owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(_owner address) constant returns(balance uint256)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCallerSession) BalanceOf(_owner common.Address) (*big.Int, error) {
	return _MainnetERC721XCardsContract.Contract.BalanceOf(&_MainnetERC721XCardsContract.CallOpts, _owner)
}

// BalanceOfToken is a free data retrieval call binding the contract method 0xe380b7bd.
//
// Solidity: function balanceOfToken(_owner address, _tokenId uint256) constant returns(uint256)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCaller) BalanceOfToken(opts *bind.CallOpts, _owner common.Address, _tokenId *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MainnetERC721XCardsContract.contract.Call(opts, out, "balanceOfToken", _owner, _tokenId)
	return *ret0, err
}

// BalanceOfToken is a free data retrieval call binding the contract method 0xe380b7bd.
//
// Solidity: function balanceOfToken(_owner address, _tokenId uint256) constant returns(uint256)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) BalanceOfToken(_owner common.Address, _tokenId *big.Int) (*big.Int, error) {
	return _MainnetERC721XCardsContract.Contract.BalanceOfToken(&_MainnetERC721XCardsContract.CallOpts, _owner, _tokenId)
}

// BalanceOfToken is a free data retrieval call binding the contract method 0xe380b7bd.
//
// Solidity: function balanceOfToken(_owner address, _tokenId uint256) constant returns(uint256)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCallerSession) BalanceOfToken(_owner common.Address, _tokenId *big.Int) (*big.Int, error) {
	return _MainnetERC721XCardsContract.Contract.BalanceOfToken(&_MainnetERC721XCardsContract.CallOpts, _owner, _tokenId)
}

// Exists is a free data retrieval call binding the contract method 0x4f558e79.
//
// Solidity: function exists(_tokenId uint256) constant returns(bool)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCaller) Exists(opts *bind.CallOpts, _tokenId *big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _MainnetERC721XCardsContract.contract.Call(opts, out, "exists", _tokenId)
	return *ret0, err
}

// Exists is a free data retrieval call binding the contract method 0x4f558e79.
//
// Solidity: function exists(_tokenId uint256) constant returns(bool)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) Exists(_tokenId *big.Int) (bool, error) {
	return _MainnetERC721XCardsContract.Contract.Exists(&_MainnetERC721XCardsContract.CallOpts, _tokenId)
}

// Exists is a free data retrieval call binding the contract method 0x4f558e79.
//
// Solidity: function exists(_tokenId uint256) constant returns(bool)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCallerSession) Exists(_tokenId *big.Int) (bool, error) {
	return _MainnetERC721XCardsContract.Contract.Exists(&_MainnetERC721XCardsContract.CallOpts, _tokenId)
}

// Gateway is a free data retrieval call binding the contract method 0x116191b6.
//
// Solidity: function gateway() constant returns(address)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCaller) Gateway(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MainnetERC721XCardsContract.contract.Call(opts, out, "gateway")
	return *ret0, err
}

// Gateway is a free data retrieval call binding the contract method 0x116191b6.
//
// Solidity: function gateway() constant returns(address)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) Gateway() (common.Address, error) {
	return _MainnetERC721XCardsContract.Contract.Gateway(&_MainnetERC721XCardsContract.CallOpts)
}

// Gateway is a free data retrieval call binding the contract method 0x116191b6.
//
// Solidity: function gateway() constant returns(address)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCallerSession) Gateway() (common.Address, error) {
	return _MainnetERC721XCardsContract.Contract.Gateway(&_MainnetERC721XCardsContract.CallOpts)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(_tokenId uint256) constant returns(address)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCaller) GetApproved(opts *bind.CallOpts, _tokenId *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MainnetERC721XCardsContract.contract.Call(opts, out, "getApproved", _tokenId)
	return *ret0, err
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(_tokenId uint256) constant returns(address)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) GetApproved(_tokenId *big.Int) (common.Address, error) {
	return _MainnetERC721XCardsContract.Contract.GetApproved(&_MainnetERC721XCardsContract.CallOpts, _tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(_tokenId uint256) constant returns(address)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCallerSession) GetApproved(_tokenId *big.Int) (common.Address, error) {
	return _MainnetERC721XCardsContract.Contract.GetApproved(&_MainnetERC721XCardsContract.CallOpts, _tokenId)
}

// ImplementsERC721 is a free data retrieval call binding the contract method 0x1051db34.
//
// Solidity: function implementsERC721() constant returns(bool)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCaller) ImplementsERC721(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _MainnetERC721XCardsContract.contract.Call(opts, out, "implementsERC721")
	return *ret0, err
}

// ImplementsERC721 is a free data retrieval call binding the contract method 0x1051db34.
//
// Solidity: function implementsERC721() constant returns(bool)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) ImplementsERC721() (bool, error) {
	return _MainnetERC721XCardsContract.Contract.ImplementsERC721(&_MainnetERC721XCardsContract.CallOpts)
}

// ImplementsERC721 is a free data retrieval call binding the contract method 0x1051db34.
//
// Solidity: function implementsERC721() constant returns(bool)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCallerSession) ImplementsERC721() (bool, error) {
	return _MainnetERC721XCardsContract.Contract.ImplementsERC721(&_MainnetERC721XCardsContract.CallOpts)
}

// ImplementsERC721X is a free data retrieval call binding the contract method 0x7fb42a36.
//
// Solidity: function implementsERC721X() constant returns(bool)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCaller) ImplementsERC721X(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _MainnetERC721XCardsContract.contract.Call(opts, out, "implementsERC721X")
	return *ret0, err
}

// ImplementsERC721X is a free data retrieval call binding the contract method 0x7fb42a36.
//
// Solidity: function implementsERC721X() constant returns(bool)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) ImplementsERC721X() (bool, error) {
	return _MainnetERC721XCardsContract.Contract.ImplementsERC721X(&_MainnetERC721XCardsContract.CallOpts)
}

// ImplementsERC721X is a free data retrieval call binding the contract method 0x7fb42a36.
//
// Solidity: function implementsERC721X() constant returns(bool)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCallerSession) ImplementsERC721X() (bool, error) {
	return _MainnetERC721XCardsContract.Contract.ImplementsERC721X(&_MainnetERC721XCardsContract.CallOpts)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(_owner address, _operator address) constant returns(isOperator bool)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCaller) IsApprovedForAll(opts *bind.CallOpts, _owner common.Address, _operator common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _MainnetERC721XCardsContract.contract.Call(opts, out, "isApprovedForAll", _owner, _operator)
	return *ret0, err
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(_owner address, _operator address) constant returns(isOperator bool)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) IsApprovedForAll(_owner common.Address, _operator common.Address) (bool, error) {
	return _MainnetERC721XCardsContract.Contract.IsApprovedForAll(&_MainnetERC721XCardsContract.CallOpts, _owner, _operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(_owner address, _operator address) constant returns(isOperator bool)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCallerSession) IsApprovedForAll(_owner common.Address, _operator common.Address) (bool, error) {
	return _MainnetERC721XCardsContract.Contract.IsApprovedForAll(&_MainnetERC721XCardsContract.CallOpts, _owner, _operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCaller) Name(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _MainnetERC721XCardsContract.contract.Call(opts, out, "name")
	return *ret0, err
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) Name() (string, error) {
	return _MainnetERC721XCardsContract.Contract.Name(&_MainnetERC721XCardsContract.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCallerSession) Name() (string, error) {
	return _MainnetERC721XCardsContract.Contract.Name(&_MainnetERC721XCardsContract.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(_tokenId uint256) constant returns(address)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCaller) OwnerOf(opts *bind.CallOpts, _tokenId *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MainnetERC721XCardsContract.contract.Call(opts, out, "ownerOf", _tokenId)
	return *ret0, err
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(_tokenId uint256) constant returns(address)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) OwnerOf(_tokenId *big.Int) (common.Address, error) {
	return _MainnetERC721XCardsContract.Contract.OwnerOf(&_MainnetERC721XCardsContract.CallOpts, _tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(_tokenId uint256) constant returns(address)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCallerSession) OwnerOf(_tokenId *big.Int) (common.Address, error) {
	return _MainnetERC721XCardsContract.Contract.OwnerOf(&_MainnetERC721XCardsContract.CallOpts, _tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(interfaceId bytes4) constant returns(bool)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _MainnetERC721XCardsContract.contract.Call(opts, out, "supportsInterface", interfaceId)
	return *ret0, err
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(interfaceId bytes4) constant returns(bool)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _MainnetERC721XCardsContract.Contract.SupportsInterface(&_MainnetERC721XCardsContract.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(interfaceId bytes4) constant returns(bool)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _MainnetERC721XCardsContract.Contract.SupportsInterface(&_MainnetERC721XCardsContract.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() constant returns(string)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _MainnetERC721XCardsContract.contract.Call(opts, out, "symbol")
	return *ret0, err
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() constant returns(string)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) Symbol() (string, error) {
	return _MainnetERC721XCardsContract.Contract.Symbol(&_MainnetERC721XCardsContract.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() constant returns(string)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCallerSession) Symbol() (string, error) {
	return _MainnetERC721XCardsContract.Contract.Symbol(&_MainnetERC721XCardsContract.CallOpts)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(_index uint256) constant returns(uint256)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCaller) TokenByIndex(opts *bind.CallOpts, _index *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MainnetERC721XCardsContract.contract.Call(opts, out, "tokenByIndex", _index)
	return *ret0, err
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(_index uint256) constant returns(uint256)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) TokenByIndex(_index *big.Int) (*big.Int, error) {
	return _MainnetERC721XCardsContract.Contract.TokenByIndex(&_MainnetERC721XCardsContract.CallOpts, _index)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(_index uint256) constant returns(uint256)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCallerSession) TokenByIndex(_index *big.Int) (*big.Int, error) {
	return _MainnetERC721XCardsContract.Contract.TokenByIndex(&_MainnetERC721XCardsContract.CallOpts, _index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(_owner address, _index uint256) constant returns(_tokenId uint256)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCaller) TokenOfOwnerByIndex(opts *bind.CallOpts, _owner common.Address, _index *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MainnetERC721XCardsContract.contract.Call(opts, out, "tokenOfOwnerByIndex", _owner, _index)
	return *ret0, err
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(_owner address, _index uint256) constant returns(_tokenId uint256)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) TokenOfOwnerByIndex(_owner common.Address, _index *big.Int) (*big.Int, error) {
	return _MainnetERC721XCardsContract.Contract.TokenOfOwnerByIndex(&_MainnetERC721XCardsContract.CallOpts, _owner, _index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(_owner address, _index uint256) constant returns(_tokenId uint256)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCallerSession) TokenOfOwnerByIndex(_owner common.Address, _index *big.Int) (*big.Int, error) {
	return _MainnetERC721XCardsContract.Contract.TokenOfOwnerByIndex(&_MainnetERC721XCardsContract.CallOpts, _owner, _index)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(_tokenId uint256) constant returns(string)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCaller) TokenURI(opts *bind.CallOpts, _tokenId *big.Int) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _MainnetERC721XCardsContract.contract.Call(opts, out, "tokenURI", _tokenId)
	return *ret0, err
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(_tokenId uint256) constant returns(string)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) TokenURI(_tokenId *big.Int) (string, error) {
	return _MainnetERC721XCardsContract.Contract.TokenURI(&_MainnetERC721XCardsContract.CallOpts, _tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(_tokenId uint256) constant returns(string)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCallerSession) TokenURI(_tokenId *big.Int) (string, error) {
	return _MainnetERC721XCardsContract.Contract.TokenURI(&_MainnetERC721XCardsContract.CallOpts, _tokenId)
}

// TokensOwned is a free data retrieval call binding the contract method 0x21cda790.
//
// Solidity: function tokensOwned(_owner address) constant returns(indexes uint256[], balances uint256[])
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCaller) TokensOwned(opts *bind.CallOpts, _owner common.Address) (struct {
	Indexes  []*big.Int
	Balances []*big.Int
}, error) {
	ret := new(struct {
		Indexes  []*big.Int
		Balances []*big.Int
	})
	out := ret
	err := _MainnetERC721XCardsContract.contract.Call(opts, out, "tokensOwned", _owner)
	return *ret, err
}

// TokensOwned is a free data retrieval call binding the contract method 0x21cda790.
//
// Solidity: function tokensOwned(_owner address) constant returns(indexes uint256[], balances uint256[])
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) TokensOwned(_owner common.Address) (struct {
	Indexes  []*big.Int
	Balances []*big.Int
}, error) {
	return _MainnetERC721XCardsContract.Contract.TokensOwned(&_MainnetERC721XCardsContract.CallOpts, _owner)
}

// TokensOwned is a free data retrieval call binding the contract method 0x21cda790.
//
// Solidity: function tokensOwned(_owner address) constant returns(indexes uint256[], balances uint256[])
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCallerSession) TokensOwned(_owner common.Address) (struct {
	Indexes  []*big.Int
	Balances []*big.Int
}, error) {
	return _MainnetERC721XCardsContract.Contract.TokensOwned(&_MainnetERC721XCardsContract.CallOpts, _owner)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() constant returns(uint256)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MainnetERC721XCardsContract.contract.Call(opts, out, "totalSupply")
	return *ret0, err
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() constant returns(uint256)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) TotalSupply() (*big.Int, error) {
	return _MainnetERC721XCardsContract.Contract.TotalSupply(&_MainnetERC721XCardsContract.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() constant returns(uint256)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractCallerSession) TotalSupply() (*big.Int, error) {
	return _MainnetERC721XCardsContract.Contract.TotalSupply(&_MainnetERC721XCardsContract.CallOpts)
}

// Airdrop is a paid mutator transaction binding the contract method 0x092154b1.
//
// Solidity: function airdrop(tokenIds uint256[], amounts uint256[], receivers address[]) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactor) Airdrop(opts *bind.TransactOpts, tokenIds []*big.Int, amounts []*big.Int, receivers []common.Address) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.contract.Transact(opts, "airdrop", tokenIds, amounts, receivers)
}

// Airdrop is a paid mutator transaction binding the contract method 0x092154b1.
//
// Solidity: function airdrop(tokenIds uint256[], amounts uint256[], receivers address[]) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) Airdrop(tokenIds []*big.Int, amounts []*big.Int, receivers []common.Address) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.Airdrop(&_MainnetERC721XCardsContract.TransactOpts, tokenIds, amounts, receivers)
}

// Airdrop is a paid mutator transaction binding the contract method 0x092154b1.
//
// Solidity: function airdrop(tokenIds uint256[], amounts uint256[], receivers address[]) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactorSession) Airdrop(tokenIds []*big.Int, amounts []*big.Int, receivers []common.Address) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.Airdrop(&_MainnetERC721XCardsContract.TransactOpts, tokenIds, amounts, receivers)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(_to address, _tokenId uint256) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactor) Approve(opts *bind.TransactOpts, _to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.contract.Transact(opts, "approve", _to, _tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(_to address, _tokenId uint256) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) Approve(_to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.Approve(&_MainnetERC721XCardsContract.TransactOpts, _to, _tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(_to address, _tokenId uint256) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactorSession) Approve(_to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.Approve(&_MainnetERC721XCardsContract.TransactOpts, _to, _tokenId)
}

// BatchTransferFrom is a paid mutator transaction binding the contract method 0x17fad7fc.
//
// Solidity: function batchTransferFrom(_from address, _to address, _tokenIds uint256[], _amounts uint256[]) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactor) BatchTransferFrom(opts *bind.TransactOpts, _from common.Address, _to common.Address, _tokenIds []*big.Int, _amounts []*big.Int) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.contract.Transact(opts, "batchTransferFrom", _from, _to, _tokenIds, _amounts)
}

// BatchTransferFrom is a paid mutator transaction binding the contract method 0x17fad7fc.
//
// Solidity: function batchTransferFrom(_from address, _to address, _tokenIds uint256[], _amounts uint256[]) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) BatchTransferFrom(_from common.Address, _to common.Address, _tokenIds []*big.Int, _amounts []*big.Int) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.BatchTransferFrom(&_MainnetERC721XCardsContract.TransactOpts, _from, _to, _tokenIds, _amounts)
}

// BatchTransferFrom is a paid mutator transaction binding the contract method 0x17fad7fc.
//
// Solidity: function batchTransferFrom(_from address, _to address, _tokenIds uint256[], _amounts uint256[]) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactorSession) BatchTransferFrom(_from common.Address, _to common.Address, _tokenIds []*big.Int, _amounts []*big.Int) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.BatchTransferFrom(&_MainnetERC721XCardsContract.TransactOpts, _from, _to, _tokenIds, _amounts)
}

// DepositToGateway is a paid mutator transaction binding the contract method 0x45f0edb7.
//
// Solidity: function depositToGateway(_tokenId uint256, amount uint256) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactor) DepositToGateway(opts *bind.TransactOpts, _tokenId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.contract.Transact(opts, "depositToGateway", _tokenId, amount)
}

// DepositToGateway is a paid mutator transaction binding the contract method 0x45f0edb7.
//
// Solidity: function depositToGateway(_tokenId uint256, amount uint256) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) DepositToGateway(_tokenId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.DepositToGateway(&_MainnetERC721XCardsContract.TransactOpts, _tokenId, amount)
}

// DepositToGateway is a paid mutator transaction binding the contract method 0x45f0edb7.
//
// Solidity: function depositToGateway(_tokenId uint256, amount uint256) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactorSession) DepositToGateway(_tokenId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.DepositToGateway(&_MainnetERC721XCardsContract.TransactOpts, _tokenId, amount)
}

// DepositToGatewayNFT is a paid mutator transaction binding the contract method 0xa5d2827d.
//
// Solidity: function depositToGatewayNFT(_tokenId uint256) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactor) DepositToGatewayNFT(opts *bind.TransactOpts, _tokenId *big.Int) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.contract.Transact(opts, "depositToGatewayNFT", _tokenId)
}

// DepositToGatewayNFT is a paid mutator transaction binding the contract method 0xa5d2827d.
//
// Solidity: function depositToGatewayNFT(_tokenId uint256) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) DepositToGatewayNFT(_tokenId *big.Int) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.DepositToGatewayNFT(&_MainnetERC721XCardsContract.TransactOpts, _tokenId)
}

// DepositToGatewayNFT is a paid mutator transaction binding the contract method 0xa5d2827d.
//
// Solidity: function depositToGatewayNFT(_tokenId uint256) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactorSession) DepositToGatewayNFT(_tokenId *big.Int) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.DepositToGatewayNFT(&_MainnetERC721XCardsContract.TransactOpts, _tokenId)
}

// Mint is a paid mutator transaction binding the contract method 0x94bf804d.
//
// Solidity: function mint(_tokenId uint256, _to address) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactor) Mint(opts *bind.TransactOpts, _tokenId *big.Int, _to common.Address) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.contract.Transact(opts, "mint", _tokenId, _to)
}

// Mint is a paid mutator transaction binding the contract method 0x94bf804d.
//
// Solidity: function mint(_tokenId uint256, _to address) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) Mint(_tokenId *big.Int, _to common.Address) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.Mint(&_MainnetERC721XCardsContract.TransactOpts, _tokenId, _to)
}

// Mint is a paid mutator transaction binding the contract method 0x94bf804d.
//
// Solidity: function mint(_tokenId uint256, _to address) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactorSession) Mint(_tokenId *big.Int, _to common.Address) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.Mint(&_MainnetERC721XCardsContract.TransactOpts, _tokenId, _to)
}

// MintTokens is a paid mutator transaction binding the contract method 0x6831e272.
//
// Solidity: function mintTokens(_to address, _tokenId uint256, _amount uint256) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactor) MintTokens(opts *bind.TransactOpts, _to common.Address, _tokenId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.contract.Transact(opts, "mintTokens", _to, _tokenId, _amount)
}

// MintTokens is a paid mutator transaction binding the contract method 0x6831e272.
//
// Solidity: function mintTokens(_to address, _tokenId uint256, _amount uint256) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) MintTokens(_to common.Address, _tokenId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.MintTokens(&_MainnetERC721XCardsContract.TransactOpts, _to, _tokenId, _amount)
}

// MintTokens is a paid mutator transaction binding the contract method 0x6831e272.
//
// Solidity: function mintTokens(_to address, _tokenId uint256, _amount uint256) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactorSession) MintTokens(_to common.Address, _tokenId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.MintTokens(&_MainnetERC721XCardsContract.TransactOpts, _to, _tokenId, _amount)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(_from address, _to address, _tokenIds uint256[], _amounts uint256[], _data bytes) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactor) SafeBatchTransferFrom(opts *bind.TransactOpts, _from common.Address, _to common.Address, _tokenIds []*big.Int, _amounts []*big.Int, _data []byte) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.contract.Transact(opts, "safeBatchTransferFrom", _from, _to, _tokenIds, _amounts, _data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(_from address, _to address, _tokenIds uint256[], _amounts uint256[], _data bytes) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) SafeBatchTransferFrom(_from common.Address, _to common.Address, _tokenIds []*big.Int, _amounts []*big.Int, _data []byte) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.SafeBatchTransferFrom(&_MainnetERC721XCardsContract.TransactOpts, _from, _to, _tokenIds, _amounts, _data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(_from address, _to address, _tokenIds uint256[], _amounts uint256[], _data bytes) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactorSession) SafeBatchTransferFrom(_from common.Address, _to common.Address, _tokenIds []*big.Int, _amounts []*big.Int, _data []byte) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.SafeBatchTransferFrom(&_MainnetERC721XCardsContract.TransactOpts, _from, _to, _tokenIds, _amounts, _data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(_from address, _to address, _tokenId uint256, _amount uint256, _data bytes) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactor) SafeTransferFrom(opts *bind.TransactOpts, _from common.Address, _to common.Address, _tokenId *big.Int, _amount *big.Int, _data []byte) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.contract.Transact(opts, "safeTransferFrom", _from, _to, _tokenId, _amount, _data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(_from address, _to address, _tokenId uint256, _amount uint256, _data bytes) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) SafeTransferFrom(_from common.Address, _to common.Address, _tokenId *big.Int, _amount *big.Int, _data []byte) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.SafeTransferFrom(&_MainnetERC721XCardsContract.TransactOpts, _from, _to, _tokenId, _amount, _data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(_from address, _to address, _tokenId uint256, _amount uint256, _data bytes) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactorSession) SafeTransferFrom(_from common.Address, _to common.Address, _tokenId *big.Int, _amount *big.Int, _data []byte) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.SafeTransferFrom(&_MainnetERC721XCardsContract.TransactOpts, _from, _to, _tokenId, _amount, _data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(_operator address, _approved bool) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactor) SetApprovalForAll(opts *bind.TransactOpts, _operator common.Address, _approved bool) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.contract.Transact(opts, "setApprovalForAll", _operator, _approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(_operator address, _approved bool) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) SetApprovalForAll(_operator common.Address, _approved bool) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.SetApprovalForAll(&_MainnetERC721XCardsContract.TransactOpts, _operator, _approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(_operator address, _approved bool) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactorSession) SetApprovalForAll(_operator common.Address, _approved bool) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.SetApprovalForAll(&_MainnetERC721XCardsContract.TransactOpts, _operator, _approved)
}

// Transfer is a paid mutator transaction binding the contract method 0x095bcdb6.
//
// Solidity: function transfer(_to address, _tokenId uint256, _amount uint256) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactor) Transfer(opts *bind.TransactOpts, _to common.Address, _tokenId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.contract.Transact(opts, "transfer", _to, _tokenId, _amount)
}

// Transfer is a paid mutator transaction binding the contract method 0x095bcdb6.
//
// Solidity: function transfer(_to address, _tokenId uint256, _amount uint256) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) Transfer(_to common.Address, _tokenId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.Transfer(&_MainnetERC721XCardsContract.TransactOpts, _to, _tokenId, _amount)
}

// Transfer is a paid mutator transaction binding the contract method 0x095bcdb6.
//
// Solidity: function transfer(_to address, _tokenId uint256, _amount uint256) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactorSession) Transfer(_to common.Address, _tokenId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.Transfer(&_MainnetERC721XCardsContract.TransactOpts, _to, _tokenId, _amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0xfe99049a.
//
// Solidity: function transferFrom(_from address, _to address, _tokenId uint256, _amount uint256) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactor) TransferFrom(opts *bind.TransactOpts, _from common.Address, _to common.Address, _tokenId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.contract.Transact(opts, "transferFrom", _from, _to, _tokenId, _amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0xfe99049a.
//
// Solidity: function transferFrom(_from address, _to address, _tokenId uint256, _amount uint256) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractSession) TransferFrom(_from common.Address, _to common.Address, _tokenId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.TransferFrom(&_MainnetERC721XCardsContract.TransactOpts, _from, _to, _tokenId, _amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0xfe99049a.
//
// Solidity: function transferFrom(_from address, _to address, _tokenId uint256, _amount uint256) returns()
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractTransactorSession) TransferFrom(_from common.Address, _to common.Address, _tokenId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _MainnetERC721XCardsContract.Contract.TransferFrom(&_MainnetERC721XCardsContract.TransactOpts, _from, _to, _tokenId, _amount)
}

// MainnetERC721XCardsContractApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the MainnetERC721XCardsContract contract.
type MainnetERC721XCardsContractApprovalIterator struct {
	Event *MainnetERC721XCardsContractApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MainnetERC721XCardsContractApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MainnetERC721XCardsContractApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MainnetERC721XCardsContractApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MainnetERC721XCardsContractApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MainnetERC721XCardsContractApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MainnetERC721XCardsContractApproval represents a Approval event raised by the MainnetERC721XCardsContract contract.
type MainnetERC721XCardsContractApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: e Approval(owner indexed address, approved indexed address, tokenId indexed uint256)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*MainnetERC721XCardsContractApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _MainnetERC721XCardsContract.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &MainnetERC721XCardsContractApprovalIterator{contract: _MainnetERC721XCardsContract.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: e Approval(owner indexed address, approved indexed address, tokenId indexed uint256)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *MainnetERC721XCardsContractApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _MainnetERC721XCardsContract.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MainnetERC721XCardsContractApproval)
				if err := _MainnetERC721XCardsContract.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MainnetERC721XCardsContractApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the MainnetERC721XCardsContract contract.
type MainnetERC721XCardsContractApprovalForAllIterator struct {
	Event *MainnetERC721XCardsContractApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MainnetERC721XCardsContractApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MainnetERC721XCardsContractApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MainnetERC721XCardsContractApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MainnetERC721XCardsContractApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MainnetERC721XCardsContractApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MainnetERC721XCardsContractApprovalForAll represents a ApprovalForAll event raised by the MainnetERC721XCardsContract contract.
type MainnetERC721XCardsContractApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: e ApprovalForAll(owner indexed address, operator indexed address, approved bool)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*MainnetERC721XCardsContractApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _MainnetERC721XCardsContract.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &MainnetERC721XCardsContractApprovalForAllIterator{contract: _MainnetERC721XCardsContract.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: e ApprovalForAll(owner indexed address, operator indexed address, approved bool)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *MainnetERC721XCardsContractApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _MainnetERC721XCardsContract.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MainnetERC721XCardsContractApprovalForAll)
				if err := _MainnetERC721XCardsContract.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MainnetERC721XCardsContractBatchTransferIterator is returned from FilterBatchTransfer and is used to iterate over the raw logs and unpacked data for BatchTransfer events raised by the MainnetERC721XCardsContract contract.
type MainnetERC721XCardsContractBatchTransferIterator struct {
	Event *MainnetERC721XCardsContractBatchTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MainnetERC721XCardsContractBatchTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MainnetERC721XCardsContractBatchTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MainnetERC721XCardsContractBatchTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MainnetERC721XCardsContractBatchTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MainnetERC721XCardsContractBatchTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MainnetERC721XCardsContractBatchTransfer represents a BatchTransfer event raised by the MainnetERC721XCardsContract contract.
type MainnetERC721XCardsContractBatchTransfer struct {
	From       common.Address
	To         common.Address
	TokenTypes []*big.Int
	Amounts    []*big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterBatchTransfer is a free log retrieval operation binding the contract event 0xf59807b2c31ca3ba212e90599175c120c556422950bac5be656274483e8581df.
//
// Solidity: e BatchTransfer(from address, to address, tokenTypes uint256[], amounts uint256[])
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractFilterer) FilterBatchTransfer(opts *bind.FilterOpts) (*MainnetERC721XCardsContractBatchTransferIterator, error) {

	logs, sub, err := _MainnetERC721XCardsContract.contract.FilterLogs(opts, "BatchTransfer")
	if err != nil {
		return nil, err
	}
	return &MainnetERC721XCardsContractBatchTransferIterator{contract: _MainnetERC721XCardsContract.contract, event: "BatchTransfer", logs: logs, sub: sub}, nil
}

// WatchBatchTransfer is a free log subscription operation binding the contract event 0xf59807b2c31ca3ba212e90599175c120c556422950bac5be656274483e8581df.
//
// Solidity: e BatchTransfer(from address, to address, tokenTypes uint256[], amounts uint256[])
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractFilterer) WatchBatchTransfer(opts *bind.WatchOpts, sink chan<- *MainnetERC721XCardsContractBatchTransfer) (event.Subscription, error) {

	logs, sub, err := _MainnetERC721XCardsContract.contract.WatchLogs(opts, "BatchTransfer")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MainnetERC721XCardsContractBatchTransfer)
				if err := _MainnetERC721XCardsContract.contract.UnpackLog(event, "BatchTransfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MainnetERC721XCardsContractTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the MainnetERC721XCardsContract contract.
type MainnetERC721XCardsContractTransferIterator struct {
	Event *MainnetERC721XCardsContractTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MainnetERC721XCardsContractTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MainnetERC721XCardsContractTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MainnetERC721XCardsContractTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MainnetERC721XCardsContractTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MainnetERC721XCardsContractTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MainnetERC721XCardsContractTransfer represents a Transfer event raised by the MainnetERC721XCardsContract contract.
type MainnetERC721XCardsContractTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: e Transfer(from indexed address, to indexed address, tokenId indexed uint256)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*MainnetERC721XCardsContractTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _MainnetERC721XCardsContract.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &MainnetERC721XCardsContractTransferIterator{contract: _MainnetERC721XCardsContract.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: e Transfer(from indexed address, to indexed address, tokenId indexed uint256)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *MainnetERC721XCardsContractTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _MainnetERC721XCardsContract.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MainnetERC721XCardsContractTransfer)
				if err := _MainnetERC721XCardsContract.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MainnetERC721XCardsContractTransferWithQuantityIterator is returned from FilterTransferWithQuantity and is used to iterate over the raw logs and unpacked data for TransferWithQuantity events raised by the MainnetERC721XCardsContract contract.
type MainnetERC721XCardsContractTransferWithQuantityIterator struct {
	Event *MainnetERC721XCardsContractTransferWithQuantity // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MainnetERC721XCardsContractTransferWithQuantityIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MainnetERC721XCardsContractTransferWithQuantity)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MainnetERC721XCardsContractTransferWithQuantity)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MainnetERC721XCardsContractTransferWithQuantityIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MainnetERC721XCardsContractTransferWithQuantityIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MainnetERC721XCardsContractTransferWithQuantity represents a TransferWithQuantity event raised by the MainnetERC721XCardsContract contract.
type MainnetERC721XCardsContractTransferWithQuantity struct {
	From     common.Address
	To       common.Address
	TokenId  *big.Int
	Quantity *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferWithQuantity is a free log retrieval operation binding the contract event 0x2114851a3e2a54429989f46c1ab0743e37ded205d9bbdfd85635aed5bd595a06.
//
// Solidity: e TransferWithQuantity(from indexed address, to indexed address, tokenId indexed uint256, quantity uint256)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractFilterer) FilterTransferWithQuantity(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*MainnetERC721XCardsContractTransferWithQuantityIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _MainnetERC721XCardsContract.contract.FilterLogs(opts, "TransferWithQuantity", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &MainnetERC721XCardsContractTransferWithQuantityIterator{contract: _MainnetERC721XCardsContract.contract, event: "TransferWithQuantity", logs: logs, sub: sub}, nil
}

// WatchTransferWithQuantity is a free log subscription operation binding the contract event 0x2114851a3e2a54429989f46c1ab0743e37ded205d9bbdfd85635aed5bd595a06.
//
// Solidity: e TransferWithQuantity(from indexed address, to indexed address, tokenId indexed uint256, quantity uint256)
func (_MainnetERC721XCardsContract *MainnetERC721XCardsContractFilterer) WatchTransferWithQuantity(opts *bind.WatchOpts, sink chan<- *MainnetERC721XCardsContractTransferWithQuantity, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _MainnetERC721XCardsContract.contract.WatchLogs(opts, "TransferWithQuantity", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MainnetERC721XCardsContractTransferWithQuantity)
				if err := _MainnetERC721XCardsContract.contract.UnpackLog(event, "TransferWithQuantity", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
